#pragma once

#include "tmp/shaders/shadersenumsautogen.h"
#include "tmp/shaders/shaderconstantbuffersautogen.h"

namespace AutoGenerated
{ 
    struct AutoGeneratedShaderData;
}

class GfxShader
{
public:
    ID3DBlob* GetBlob() const { return m_ShaderBlob.Get(); }
    std::size_t GetHash() const { return m_Hash; }

protected:
    void Initialize(const AutoGenerated::AutoGeneratedShaderData&);

    ComPtr<ID3DBlob> m_ShaderBlob;
    ShaderPermutation m_ShaderPermutation = (ShaderPermutation)0xDEADBEEF;
    std::size_t m_Hash = 0;

    friend class GfxShaderManager;
};

class GfxShaderManager
{
public:
    DeclareSingletonFunctions(GfxShaderManager);

    void Initialize();
    
    GfxShader& GetShader(ShaderPermutation shaderPermutation) { return m_AllShaders[static_cast<uint32_t>(shaderPermutation)]; }

private:
    std::array<GfxShader, g_NumShaders> m_AllShaders;
};
