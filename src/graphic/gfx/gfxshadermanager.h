#pragma once

// Must be exactly the same as in the ShaderCompiler
DEFINE_ENUM_WITH_STRING_CONVERSIONS(GfxShaderType, (VS)(PS)(CS));

namespace AutoGenerated
{ 
    struct ShaderData;
}

struct GfxShader
{
    GfxShaderType m_Type;
    ComPtr<ID3DBlob> m_ShaderBlob;
    std::size_t m_Hash = 0;

private:
    void Initialize(const AutoGenerated::ShaderData&);

    friend class GfxShaderManager;
};

class GfxShaderManager
{
public:
    DeclareSingletonFunctions(GfxShaderManager);

    void Initialize();

    template <typename ShaderPermutations>
    const GfxShader& GetShader(const ShaderPermutations& permutations) const
    {
        return m_ShaderContainers[ShaderPermutations::ShaderType].at(ShaderPermutations::BaseShaderID).at(permutations.m_ShaderKey);
    }

    static GfxShader& GetNullShader(GfxShaderType shaderType)
    {
        static GfxShader s_NullShaders[GfxShaderType_Count] = { {VS}, {PS}, {CS} };
        return s_NullShaders[shaderType];
    }

private:
    // key == BaseShaderID, val = { ShaderKey, GfxShader }
    using ShaderContainer = FlatMap<std::size_t, FlatMap<uint32_t, GfxShader>>;
    ShaderContainer m_ShaderContainers[GfxShaderType_Count];
};
#define g_GfxShaderManager GfxShaderManager::GetInstance()
