#include <graphic/gfx/gfxshadermanager.h>

#include <d3dcompiler.h>

#include <graphic/dx12utils.h>

#include <tmp/shaders/shaderbytecodes.h>

void GfxShader::Initialize(const AutoGenerated::ShaderData& data)
{
    bbeProfileFunction();
    assert(m_ShaderBlob == nullptr);
    assert(m_Hash == 0);
    assert(data.m_ByteCodeArray != nullptr);
    assert(data.m_ByteCodeSize > 0);
    assert(data.m_Hash > 0);

    DX12_CALL(D3DCreateBlob(data.m_ByteCodeSize, &m_ShaderBlob));
    memcpy(m_ShaderBlob->GetBufferPointer(), data.m_ByteCodeArray, data.m_ByteCodeSize);

    assert(m_Hash == 0);
    m_Hash = data.m_Hash;
}

void GfxShaderManager::Initialize(tf::Subflow& sf)
{
    bbeProfileFunction();

    // init blank GfxShaders before doing the real MT init
    for (const AutoGenerated::ShaderData& data : AutoGenerated::gs_AllShadersData)
    {
        m_ShaderContainers[data.m_ShaderType][data.m_BaseShaderID][data.m_ShaderKey];
    }

    sf.for_each(AutoGenerated::gs_AllShadersData, AutoGenerated::gs_AllShadersData + _countof(AutoGenerated::gs_AllShadersData), [&](const AutoGenerated::ShaderData& data)
        {
            m_ShaderContainers[data.m_ShaderType][data.m_BaseShaderID][data.m_ShaderKey].Initialize(data);
        });
}
