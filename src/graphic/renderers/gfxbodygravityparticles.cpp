
#include <graphic/pch.h>

#include <system/imguimanager.h>

#include <tmp/shaders/autogen/cpp/ShaderInputs/NBodyGravityCSConsts.h>
#include <tmp/shaders/autogen/cpp/ShaderInputs/NBodyGravityVSPSConsts.h>
#include <tmp/shaders/autogen/cpp/ShaderInputs/BodyGravityPosVelo.h>
#include <tmp/shaders/autogen/cpp/ShaderPermutations/NBodyGravity.h>

namespace BodyGravityParticles
{
    static bool gs_UpdateIMGUI = false;
    static uint32_t gs_ParticleCount = 10000;

    static GfxTexture gs_ParticlesUAV;
}

class GfxBodyGravityParticlesUpdate : public GfxRendererBase
{
    void Initialize() override;
    void ShutDown() override;
    void PopulateCommandList(GfxContext& context) override;
    bool ShouldPopulateCommandList(GfxContext&) const override { return BodyGravityParticles::gs_UpdateIMGUI; }
    const char* GetName() const override { return "GfxBodyGravityParticlesUpdate"; }

    void UpdateIMGUI();

    GfxRootSignature* m_RootSignature = nullptr;
};

void GfxBodyGravityParticlesUpdate::Initialize()
{
    g_IMGUIManager.RegisterTopMenu("Graphic", GetName(), &BodyGravityParticles::gs_UpdateIMGUI);
    g_IMGUIManager.RegisterWindowUpdateCB([&]() { UpdateIMGUI(); });

    // Perfomance TIP: Order from most frequent to least frequent.
    CD3DX12_DESCRIPTOR_RANGE1 ranges[2]{};
    ranges[0].Init(D3D12_DESCRIPTOR_RANGE_TYPE_SRV, AutoGenerated::NBodyGravityCSConsts::NbSRVs, 0, 0, D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE); // input particle PosVelo SRV
    ranges[1].Init(D3D12_DESCRIPTOR_RANGE_TYPE_UAV, AutoGenerated::NBodyGravityCSConsts::NbUAVs, 0, 0, D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE);        // output particle PosVelo UAV

    m_RootSignature = g_GfxRootSignatureManager.GetOrCreateRootSig(ranges, D3D12_ROOT_SIGNATURE_FLAG_NONE, "GfxBodyGravityParticlesUpdate_RootSignature");

    GfxTexture::InitParams initParams{};
    initParams.m_BufferParams.m_NumElements = BodyGravityParticles::gs_ParticleCount;
    initParams.m_BufferParams.m_StructureByteStride = sizeof(AutoGenerated::BodyGravityPosVelo);
    initParams.m_Dimension = D3D12_RESOURCE_DIMENSION_BUFFER;
    initParams.m_Flags = D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS;
    initParams.m_ResourceName = "BodyGravityParticles_Buffer";
    BodyGravityParticles::gs_ParticlesUAV.Initialize(initParams);
}

void GfxBodyGravityParticlesUpdate::ShutDown()
{
    BodyGravityParticles::gs_ParticlesUAV.Release();
}

void GfxBodyGravityParticlesUpdate::PopulateCommandList(GfxContext& context)
{
    bbeProfileFunction();
    bbeProfileGPUFunction(context);

    assert(m_RootSignature);
    context.SetRootSignature(*m_RootSignature);
}

void GfxBodyGravityParticlesUpdate::UpdateIMGUI()
{
    if (!BodyGravityParticles::gs_UpdateIMGUI)
        return;

    if (ImGui::SliderInt("ParticleCount", &(int)BodyGravityParticles::gs_ParticleCount, 10, 10000))
    {
        // TODO: re-init resources for new particle count
    }
}

class GfxBodyGravityParticlesRender : public GfxRendererBase
{
public:
    void Initialize() override;
    bool ShouldPopulateCommandList(GfxContext&) const override { return BodyGravityParticles::gs_UpdateIMGUI; }
    void PopulateCommandList(GfxContext& context) override;

    const char* GetName() const override { return "GfxBodyGravityParticlesRender"; }

    GfxRootSignature* m_RootSignature = nullptr;
};

void GfxBodyGravityParticlesRender::Initialize()
{
    // Perfomance TIP: Order from most frequent to least frequent.
    CD3DX12_DESCRIPTOR_RANGE1 ranges[1]{};
    ranges[0].Init(D3D12_DESCRIPTOR_RANGE_TYPE_SRV, AutoGenerated::NBodyGravityVSPSConsts::NbSRVs, 0, 0, D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE); // input particle PosVelo SRV

    m_RootSignature = g_GfxRootSignatureManager.GetOrCreateRootSig(ranges, D3D12_ROOT_SIGNATURE_FLAG_NONE, "GfxBodyGravityParticlesRender_RootSignature");
}

void GfxBodyGravityParticlesRender::PopulateCommandList(GfxContext& context)
{
    bbeProfileFunction();
    bbeProfileGPUFunction(context);

    assert(m_RootSignature);
    context.SetRootSignature(*m_RootSignature);

    // No vertex formats... we'll generate the positions of each particle quad directly in the VS via Vertex/Index IDs
    context.SetVertexFormat(GfxDefaultVertexFormats::Null);

    // Describe the blend and depth states.
    D3D12_RENDER_TARGET_BLEND_DESC blendDesc = GfxCommonStates::BlendAlphaAdditive;
    blendDesc.SrcBlendAlpha = D3D12_BLEND_ZERO;
    blendDesc.DestBlendAlpha = D3D12_BLEND_ZERO;
    context.SetBlendStates(0, blendDesc);

    // Describe the blend and depth states.
    context.SetDepthStencilStates(GfxCommonStates::DepthNone);

}

REGISTER_RENDERER(GfxBodyGravityParticlesUpdate);
REGISTER_RENDERER(GfxBodyGravityParticlesRender);
