#include <graphic/renderers/gfxzprepassrenderer.h>

#include <graphic/gfx/gfxmanager.h>
#include <graphic/gfx/gfxcontext.h>
#include <graphic/gfx/gfxview.h>
#include <graphic/gfx/gfxdefaultassets.h>

#include <tmp/shaders/TestShaderConsts.h>

void GfxZPrePassRenderer::Initialize()
{
    bbeProfileFunction();
    m_Name = "GfxTestRenderPass";

    GfxContext& initContext = g_GfxManager.GenerateNewContext(D3D12_COMMAND_LIST_TYPE_DIRECT, "GfxZPrePassRenderer::Initialize");

    m_RenderPassCB.Initialize<AutoGenerated::TestShaderConsts>();

    GfxDevice& gfxDevice = g_GfxManager.GetGfxDevice();
    gfxDevice.GetCommandListsManager().QueueCommandListToExecute(initContext.GetCommandList(), initContext.GetCommandList().GetType());
}

void GfxZPrePassRenderer::ShutDown()
{
    m_RenderPassCB.Release();
}

void GfxZPrePassRenderer::PopulateCommandList(GfxContext& context)
{
    bbeProfileFunction();
    bbeProfileGPUFunction(context);

    m_Context = &context;
    context.SetRootSignature(GfxDefaultRootSignatures::CBV1_SRV1_IA);

    AutoGenerated::TestShaderConsts consts;
    consts.m_ViewProjMatrix = g_GfxView.GetViewProjMatrix();
    m_RenderPassCB.UploadToGPU(context, 0, &consts);

    GfxPipelineStateObject& pso = context.GetPSO();
    pso.SetVertexShader(g_GfxShaderManager.GetShader(ShaderPermutation::VS_TestTriangle));

    context.SetDepthStencil(g_GfxManager.GetSceneDepthBuffer());

    GfxDefaultAssets::DrawSquidRoom(context, false);
}
