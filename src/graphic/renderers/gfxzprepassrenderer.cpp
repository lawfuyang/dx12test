#include <graphic/renderers/gfxzprepassrenderer.h>

#include <graphic/gfx/gfxmanager.h>
#include <graphic/gfx/gfxcontext.h>
#include <graphic/gfx/gfxview.h>
#include <graphic/gfx/gfxdefaultassets.h>

#include <tmp/shaders/PerFrameConsts.h>

void GfxZPrePassRenderer::Initialize()
{
    bbeProfileFunction();
    m_Name = "GfxTestRenderPass";

    GfxContext& initContext = g_GfxManager.GenerateNewContext(D3D12_COMMAND_LIST_TYPE_DIRECT, "GfxZPrePassRenderer::Initialize");

    m_RenderPassCB.Initialize<AutoGenerated::PerFrameConsts>();

    GfxDevice& gfxDevice = g_GfxManager.GetGfxDevice();
    gfxDevice.GetCommandListsManager().QueueCommandListToExecute(initContext.GetCommandList(), initContext.GetCommandList().GetType());
}

void GfxZPrePassRenderer::ShutDown()
{
    m_RenderPassCB.Release();
}

void GfxZPrePassRenderer::PopulateCommandList()
{
    bbeProfileFunction();

    GfxContext& context = g_GfxManager.GenerateNewContext(D3D12_COMMAND_LIST_TYPE_DIRECT, "GfxZPrePassRenderer");
    m_Context = &context;
    context.SetRootSignature(GfxDefaultRootSignatures::CBV1_SRV1_IA);

    bbeProfileGPUFunction(context);

    AutoGenerated::PerFrameConsts consts;
    consts.m_ViewProjMatrix = g_GfxView.GetViewProjMatrix();
    m_RenderPassCB.Update(&consts);

    context.StageCBV(m_RenderPassCB, 0, 0);

    GfxPipelineStateObject& pso = context.GetPSO();

    // TODO convert to UberShader
    pso.SetVertexShader(g_GfxShaderManager.GetShader(ShaderPermutation::VS_UberShader));

    context.SetDepthStencil(g_GfxManager.GetSceneDepthBuffer());

    GfxDefaultAssets::DrawSquidRoom(context, false);
}
