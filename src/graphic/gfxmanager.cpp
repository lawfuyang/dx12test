#include <graphic/gfxmanager.h>

#include <graphic/dx12utils.h>
#include <graphic/gfxadapter.h>
#include <graphic/gfxcontext.h>
#include <graphic/gfxrootsignature.h>
#include <graphic/gfxshadermanager.h>
#include <graphic/gfxvertexformat.h>
#include <graphic/gfxdefaulttextures.h>

#include <graphic/renderpasses/gfxtestrenderpass.h>
#include <graphic/renderpasses/gfximguirenderer.h>

void InitializeGraphic()
{
    bbeProfileFunction();

    g_GfxManager.Initialize();
}

void ShutdownGraphic()
{
    bbeProfileFunction();

    g_GfxManager.ShutDown();
}

void UpdateGraphic()
{
    bbeProfileFunction();

    g_GfxManager.ScheduleGraphicTasks();

    if (Keyboard::IsKeyPressed(Keyboard::KEY_J))
    {
        g_GfxManager.DumpGfxMemory();
    }
}

void GfxManager::Initialize()
{
    bbeProfileFunction();

    tf::Taskflow tf;
    
    tf::Task adapterInitTask         = tf.emplace([&]() { g_GfxAdapter.Initialize(); }).name("adapterInitTask");
    tf::Task deviceInitTask          = tf.emplace([&]() { m_GfxDevice.Initialize(); }).name("deviceInitTask");
    tf::Task cmdListInitTask         = tf.emplace([&]() { m_GfxDevice.GetCommandListsManager().Initialize(); }).name("cmdListInitTask");
    tf::Task swapChainInitTask       = tf.emplace([&]() { m_SwapChain.Initialize(); }).name("swapChainInitTask");
    tf::Task rootSigManagerInitTask  = tf.emplace([&]() { g_GfxRootSignatureManager.Initialize(); }).name("rootSigManagerInitTask");
    tf::Task PSOManagerInitTask      = tf.emplace([&]() { g_GfxPSOManager.Initialize(); }).name("PSOManagerInitTask");
    tf::Task shaderManagerInitTask   = tf.emplace([&]() { g_GfxShaderManager.Initialize(); }).name("shaderManagerInitTask");
    tf::Task vertexFormatsInitTask   = tf.emplace([&]() { g_GfxDefaultVertexFormats.Initialize(); }).name("vertexFormatsInitTask");

    tf::Task generalGfxInitTask = tf.emplace([&]()
        {
            bbeProfile("General Gfx Init");

            tf::Taskflow generalInitTF;

            tf::Task gfxDefaultTexturesInitTask = generalInitTF.emplace([&]() { g_GfxDefaultTextures.Initialize(); }).name("gfxDefaultTexturesInitTask");
            tf::Task frameParamsCBInitTask = generalInitTF.emplace([&]() { m_FrameParamsCB.Initialize<AutoGenerated::FrameParams>(); }).name("frameParamsCBInitTask");

            g_TasksExecutor.run(generalInitTF).wait();

            m_GfxDevice.Flush(true /* andWait */);
        });

    tf::Task renderPassesInitTask = tf.emplace([&]()
        {
            bbeProfile("Render Passes Construction");

            tf::Taskflow renderPassesInitTF;

            tf::Task testRenderPassInitTask = renderPassesInitTF.emplace([&]() { g_GfxTestRenderPass.Initialize(); }).name("testRenderPassInitTask");
            tf::Task GUIManagerInitTask = renderPassesInitTF.emplace([&]() { g_GfxIMGUIRenderer.Initialize(); }).name("GUIManagerInitTask");

            g_TasksExecutor.run(renderPassesInitTF).wait();

            m_GfxDevice.Flush(true /* andWait */);
        });

    deviceInitTask.succeed(adapterInitTask);
    deviceInitTask.precede(cmdListInitTask, rootSigManagerInitTask, PSOManagerInitTask);
    generalGfxInitTask.succeed(deviceInitTask, cmdListInitTask, rootSigManagerInitTask);
    swapChainInitTask.succeed(deviceInitTask, cmdListInitTask);
    renderPassesInitTask.succeed(swapChainInitTask, rootSigManagerInitTask, PSOManagerInitTask, generalGfxInitTask);

    g_TasksExecutor.run(tf).wait();
}

void GfxManager::ShutDown()
{
    bbeProfileFunction();

    // get swapchain out of full screen before exiting
    BOOL fs = false;
    DX12_CALL(m_SwapChain.Dev()->GetFullscreenState(&fs, NULL));
    if (fs)
        m_SwapChain.Dev()->SetFullscreenState(false, NULL);

    g_GfxPSOManager.ShutDown();
    g_GfxTestRenderPass.ShutDown();
    g_GfxIMGUIRenderer.ShutDown();
    m_FrameParamsCB.Release();
    g_GfxDefaultTextures.ShutDown();

    // we must complete the previous GPU frame before exiting the app
    m_GfxDevice.WaitForEndOfCommandQueue();
    m_GfxDevice.ShutDown();
}

void GfxManager::ScheduleGraphicTasks()
{
    bbeProfileFunction();

    tf::Taskflow tf;

    // consume all gfx commmands multi-threaded
    tf::Task gfxCommandsConsumptionTasks = tf.emplace([&]()
        {
            tf::Taskflow gfxCmdsTF;

            std::vector<std::function<void()>> gfxCommandsToConsume;
            {
                bbeAutoLock(m_GfxCommandsLock);
                gfxCommandsToConsume.swap(m_GfxCommands);
            }
            auto [s,t] = gfxCmdsTF.parallel_for(gfxCommandsToConsume.begin(), gfxCommandsToConsume.end(), [](const std::function<void()>& cmd) { bbeProfile("GfxCommand_MT"); cmd(); });
            s.name("gfxCommandsToConsume parallel_for");
            t.name("gfxCommandsToConsume parallel_for");

            g_TasksExecutor.run(gfxCmdsTF).wait();
        }).name("gfxCommandsConsumptionTasks");

    tf::Task beginFrameTask = tf.emplace([&]() { BeginFrame(); }).name("beginFrameTask");
    tf::Task transitionBackBufferTask = tf.emplace([&]() { TransitionBackBufferForPresent(); }).name("transitionBackBufferTask");
    tf::Task endFrameTask = tf.emplace([&]() { EndFrame(); }).name("endFrameTask");
    tf::Task renderPassesRenderTasks = tf.emplace([&]() { ScheduleRenderPasses(); }).name("renderPassesRenderTasks");

    gfxCommandsConsumptionTasks.precede(beginFrameTask);
    beginFrameTask.precede(renderPassesRenderTasks);
    transitionBackBufferTask.succeed(renderPassesRenderTasks);
    endFrameTask.succeed(transitionBackBufferTask);

    g_TasksExecutor.run(tf).wait();
}

void GfxManager::ScheduleRenderPasses()
{
    bbeProfileFunction();

    tf::Taskflow tf;

    tf::Task testRenderPass = tf.emplace([&]() { g_GfxTestRenderPass.Render(m_GfxDevice.GenerateNewContext(D3D12_COMMAND_LIST_TYPE_DIRECT, "TestRenderPass")); }).name("TestRenderPass");
    tf::Task IMGUIRenderPass = tf.emplace([&]() { g_GfxIMGUIRenderer.Render(m_GfxDevice.GenerateNewContext(D3D12_COMMAND_LIST_TYPE_DIRECT, "IMGUIRenderPass")); }).name("IMGUIRenderPass");

    IMGUIRenderPass.succeed(testRenderPass);

    g_TasksExecutor.run(tf).wait();
}

void GfxManager::BeginFrame()
{
    bbeProfileFunction();

    // check for DXGI_ERRORs on all GfxDevices
    m_GfxDevice.CheckStatus();

    UpdateFrameParamsCB();
}

void GfxManager::EndFrame()
{
    bbeProfileFunction();

    m_GfxDevice.Flush();
    m_SwapChain.Present();

    // TODO: refactor this. use fences to sync
    m_GfxDevice.WaitForEndOfCommandQueue();
}

void GfxManager::DumpGfxMemory()
{
    WCHAR* statsString = NULL;

    D3D12MA::Allocator& allocator = m_GfxDevice.GetD3D12MemoryAllocator();

    allocator.BuildStatsString(&statsString, allocator.GetD3D12Options().ResourceHeapTier == D3D12_RESOURCE_HEAP_TIER_2);

    const std::string dumpFilePath = StringFormat("..\\bin\\GfxMemoryDump_%s.json", GetTimeStamp().c_str());
    const bool IsReadMode = false;
    CFileWrapper outFile{ dumpFilePath, IsReadMode };
    fprintf(outFile, "%ls", statsString);

    allocator.FreeStatsString(statsString);
}

void GfxManager::TransitionBackBufferForPresent()
{
    bbeProfileFunction();

    GfxContext& context = m_GfxDevice.GenerateNewContext(D3D12_COMMAND_LIST_TYPE_DIRECT, "TransitionBackBufferForPresent");
    SetD3DDebugName(context.GetCommandList().Dev(), "TransitionBackBufferForPresent");

    m_SwapChain.TransitionBackBufferForPresent(context);
}

void GfxManager::UpdateFrameParamsCB()
{
    AutoGenerated::FrameParams params;
    params.m_FrameNumber = g_System.GetSystemFrameNumber();
    params.m_CurrentFrameTime = (float)g_System.GetCappedFrameTimeMs();
    //params.m_PreviousFrameTime = g_System.GetCappedPrevFrameTimeMs();

    m_FrameParamsCB.Update(&params);
}
