#include <graphic/renderpasses/gfxtestrenderpass.h>

#include <graphic/gfxmanager.h>
#include <graphic/gfxcontext.h>
#include <graphic/gfxswapchain.h>
#include <graphic/gfxview.h>
#include <graphic/gfxdefaultassets.h>

#include <tmp/shaders/TestShaderConsts.h>

void GfxTestRenderPass::Initialize()
{
    bbeProfileFunction();

    m_Name = "GfxTestRenderPass";

    m_RenderPassCB.Initialize<AutoGenerated::TestShaderConsts>();
}

void GfxTestRenderPass::ShutDown()
{
    m_RenderPassCB.Release();
}

void GfxTestRenderPass::Render(GfxContext& context)
{
    bbeProfileFunction();
    bbeProfileGPUFunction(context);

    AutoGenerated::TestShaderConsts consts;
    consts.m_ViewProjMatrix = g_GfxView.GetViewProjMatrix();
    m_RenderPassCB.Update(&consts);

    context.BindConstantBuffer(m_RenderPassCB);
    context.BindSRV(GfxDefaultAssets::Checkerboard);

    GfxPipelineStateObject& pso = context.GetPSO();

    CD3DX12_DEPTH_STENCIL_DESC1& depthDesc = pso.GetDepthStencilStates();
    depthDesc.DepthEnable = false;
    depthDesc.StencilEnable = false;

    CD3DX12_RASTERIZER_DESC& rasterDesc = pso.GetRasterizerStates();
    rasterDesc.DepthClipEnable = false;

    GfxMesh& mesh = GfxDefaultAssets::Occcity;

    pso.SetVertexShader(g_GfxShaderManager.GetShader(ShaderPermutation::VS_TestTriangle));
    pso.SetPixelShader(g_GfxShaderManager.GetShader(ShaderPermutation::PS_TestTriangle));
    pso.SetVertexInputLayout(mesh.GetVertexFormat());

    context.SetVertexBuffer(mesh.GetVertexBuffer());
    context.SetIndexBuffer(mesh.GetIndexBuffer());
    context.SetRenderTarget(0, g_GfxManager.GetSwapChain().GetCurrentBackBuffer());

    context.DrawIndexedInstanced(mesh.GetIndexBuffer().GetNumIndices(), 1, 0, 0, 0);
}
